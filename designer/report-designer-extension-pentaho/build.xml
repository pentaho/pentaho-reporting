<!--===========================================================================
  This is the build file for the pentaho-reporting-designer-ext-pentaho project.
  
  This build file will use the build-res/subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.
  
  See build-res/subfloor.xml for more details
============================================================================-->
<project name="pentaho-reporting-designer-ext-pentaho" basedir="." default="default" xmlns:ivy="antlib:org.apache.ivy.ant">

    <description>
        This build file is used to create the API project
        and works with the build-res/subfloor.xml file.
    </description>

    <property file="${user.home}/.pentaho-reporting-build-settings.properties"
              description="Per user override settings-file for all pentaho-reporting projects."/>

    <!-- Define the default location of the common build file -->
    <property name="common.build.file" value="./build-res/subfloor.xml"
              description="This is the location of the standardized build-res/subfloor.xml file"/>

    <!-- Import the build-res/subfloor.xml file which contains all the default tasks -->
    <import file="${common.build.file}"/>

    <!--=======================================================================
        continuous

        Runs a typical continuous integration build including project dist,
        test, and coverage artifacts
        ====================================================================-->
    <target name="continuous-local" depends="build,publish-local"/>


    <!--=======================================================================
        continuous-testless

        Runs a typical continuous integration build including project dist,
        and coverage artifacts
        ====================================================================-->
    <target name="continuous-local-testless" depends="build-testless,publish-local"/>

  <!--=======================================================================
      continuous-junit

      Runs a typical continuous integration build including project dist,
      and test artifacts
      ====================================================================-->
  <target name="continuous-local-junit" depends="build-testless,test,publish-local" />

  <!--=======================================================================
      continuous-junit

      Runs a typical continuous integration build including project dist,
      and test artifacts
      ====================================================================-->
  <target name="continuous-junit" depends="build,publish" />

  <!-- Until CM-466 is fixed, hot-patch it -->
  <target name="install-ivy" depends="subfloor.install-ivy">
    <ivy:settings url="${ivy.settingsurl}" />
  </target>

    <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN build-res/subfloor.xml.
    -->

    <!-- Override default dist target to do a dist-full instead -->
    <target name="dist" depends="dist-full"/>

	
  	<!-- jmeter properties -->
  	<property name="jmeter.home" value="${basedir}/jmeter" description="jmeter installation location" />
    <property name="jmeter.version" value="2.11" description="version of jmeter to use" />
    <property name="jmeter.url" value="http://apache.cs.utah.edu/jmeter/binaries/apache-jmeter-${jmeter.version}.zip" description="URL to download jmeter from"/>
    <property name="jmeter.zip" value="${jmeter.home}/jmeter.zip"/>
    <property name="jmeter.output.dir" value="${bin.dir}/reports/jmeter" description="Base directory that holds all jmeter result files" />	
	
	
    <!-- ===================================================================
    jmeter.download-check
    
    checks to see if jmeter is available or not
    ======================================================================== -->
    <target name="jmeter.download-check" description="checks if files have already been downloaded">
      <condition property="jmeter.exists">
        <and>
          <available file="${jmeter.home}/apache-jmeter-${jmeter.version}" type="dir" />
        </and>
      </condition>
    </target>	
	
    <!-- ===================================================================
        jmeter.install
        
        downloads and unzips jmeter from sourceforge.
        ivy/maven resolution doesn't work well.  
        only a really old version of jmeter is available.
        the jmeter ant task requires a "home" location of a jmeter install,
        the ivy/maven artifacts aren't a complete install.  So we download it
        from sourceforge and unzip it in a known location.
    ======================================================================== -->
    <target name="jmeter.install" description="download and install jmeter" depends="jmeter.download-check" unless="jmeter.exists">
      <mkdir dir="${jmeter.home}"/>
      <get src="${jmeter.url}" dest="${jmeter.zip}" usetimestamp="true" />
      <unzip src="${jmeter.zip}" dest="${jmeter.home}" />
      <delete file="${jmeter.zip}" />
    </target>

    <!-- ===================================================================
        jmeter.run-tests
    ======================================================================== -->
    <target name="jmeter.run-tests" description="execute included jmeter script" depends="jmeter.install">

      <delete dir="${jmeter.output.dir}"/>
      <mkdir dir="${jmeter.output.dir}"/>

      <!-- ===================================================================
          taskdef jmeter

          Use the bundled jmeter ant task to execute test
      ======================================================================== -->
      <taskdef name="jmeter"
        classpath="${jmeter.home}/apache-jmeter-${jmeter.version}/extras/ant-jmeter-1.1.1.jar"
        classname="org.programmerplanet.ant.taskdefs.jmeter.JMeterTask" />
    	
      <jmeter
        jmeterhome="${jmeter.home}/apache-jmeter-${jmeter.version}"
        testplan="test-res/${ivy.artifact.id}-jmeter.jmx"
        resultlog="${jmeter.output.dir}/${ivy.artifact.id}-jmeter.jtl">
          <property name="run.server" value="${jmeter.run.server}" />
          <property name="run.port" value="${jmeter.run.port}" />
      </jmeter>
    	
    </target>	

    <target name="jmeter" depends="dist,jmeter.run-tests">

    </target>
</project>
