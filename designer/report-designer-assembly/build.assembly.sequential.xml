<project name="report-designer-assembly-base" basedir="." default="dist" xmlns:ivy="antlib:org.apache.ivy.ant">

  <!-- Properties -->
  <property name="lib.dir" value="${basedir}/lib"/>
  <property name="runtime-lib.dir" value="${basedir}/runtime-lib"/>
  <property name="driver-lib.dir" value="${lib.dir}/jdbc"/>
  <property name="resource.dir" value="${basedir}/resource"/>
  <property name="kettle-plugins.dir" value="plugins"/>
  <property name="doc.dir" value="${resource.dir}/docs"/>
  <property name="dist.base-name" value="prd"/>
  <property name="dist.type" value="ce"/>
  <property name="dist.name" value="${dist.base-name}-${dist.type}"/>
  <property name="resource-mac.dir" value="${basedir}/resource.mac"/>
  <property name="resource-dev.dir" value="${basedir}/devresource"/>

  <property name="bin.dir" value="${basedir}/bin" description="Base directory for all non-dist build output"/>
  <property name="stage.dir" value="${bin.dir}/stage" description="Package staging"/>
  <property name="stage.dir.mac" value="${basedir}/stage-mac"/>
  <property name="report-designer.dir.mac" value="${stage.dir.mac}/Pentaho Report Designer.app"/>
  <property name="report-designer.dir.mac.java" value="${report-designer.dir.mac}/Contents/Java"/>

  <property name="stage.dir.winlinux" value="${basedir}/stage-winlinux"/>
  <property name="report-designer.dir.winlinux" value="${stage.dir.winlinux}/report-designer"/>

  <property name="pdi-plugins.stage.dir" value="${stage.dir}/plugins"/>

  <property name="system.dir" value="${report-designer.dir.winlinux}/system" />

  <!--
    AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
    THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
    FOUND IN build-res/subfloor.xml.
  -->
  <property name="assembly.parallel" value="false"/>
  <property name="assembly.maxThreads" value="1"/>

  <!-- Add the runtime lib directory to the list that gets cleaned up with the jars -->
  <target name="clean-jars" description="Cleans the libraries that have been downloaded"
          depends="subfloor.clean-jars">
    <delete dir="${runtime-lib.dir}"/>
  </target>

  <!-- Add the stage directory to the list that gets cleaned up -->
  <target name="clean" description="Cleans all the work files" depends="subfloor.clean">
    <delete dir="${stage.dir.mac}"/>
    <delete dir="${stage.dir.winlinux}"/>
  </target>

  <!-- Change the resolve to only do default, runtime, and drivers -->
  <target name="resolve" description="Retrieves all the dependent libraries" depends="resolve-init">
    <antcall target="resolve-oss-licenses" inheritrefs="true"/>
    <antcall target="resolve-default" inheritrefs="true"/>
    <antcall target="resolve-runtime" inheritrefs="true"/>
    <antcall target="resolve-drivers" inheritrefs="true"/>
    <antcall target="resolve-plugins" inheritrefs="true"/>
    <antcall target="resolve-pentaho-system" inheritrefs="true"/>
    <antcall target="extract-plugins" inheritrefs="true"/>
    <antcall target="extract-oss-licenses" inheritrefs="true"/>
  </target>

  <target name="resolve-oss-licenses" depends="install-ivy">
    <ivy:resolve file="${ivyfile}" conf="oss-licenses"/>
    <ivy:retrieve conf="oss-licenses" pattern="${bin.dir}/[module].[ext]"/>
  </target>

  <!-- Resolve the runtime dependency group -->
  <target name="resolve-runtime" description="Retrieves runtime configuration dependencies">
    <ivy:resolve file="${ivy.artifact.ivyfilename}" conf="runtime"/>
    <ivy:retrieve conf="runtime" type="jar" pattern="${runtime-lib.dir}/[module]-[revision](-[classifier]).[ext]"
                  symlink="false"/>
  </target>

  <!-- Resolve the runtime driver dependency group -->
  <target name="resolve-drivers" description="Retrieves runtime configuration dependencies">
    <ivy:resolve file="${ivy.artifact.ivyfilename}" conf="drivers"/>
    <ivy:retrieve conf="drivers" pattern="${driver-lib.dir}/[module]-[revision](-[classifier]).[ext]" symlink="false"/>
  </target>

  <target name="resolve-default">
    <ivy:resolve file="${ivy.artifact.ivyfilename}" conf="default"/>
    <ivy:retrieve conf="default" pattern="${lib.dir}/[module]-[revision](-[classifier]).[ext]" symlink="false"/>
  </target>

  <target name="resolve-test">
    <ivy:resolve file="${ivy.artifact.ivyfilename}" conf="test"/>
    <ivy:retrieve conf="test" pattern="${testlib.dir}/[module]-[revision](-[classifier]).[ext]" symlink="false"/>
  </target>

  <target name="resolve-codegen">
    <ivy:resolve file="${ivy.artifact.ivyfilename}" conf="codegen"/>
    <ivy:retrieve conf="codegen" pattern="${lib.dir}/[module]-[revision](-[classifier]).[ext]" symlink="false"/>
  </target>

  <!-- - - - - - - - - - - - - - - - - -
      target: resolve-plugins
     - - - - - - - - - - - - - - - - - -->
  <target name="resolve-plugins">
    <ivy:resolve file="${ivyfile}" conf="plugin"/>
    <ivy:retrieve conf="plugin" pattern="${pdi-plugins.stage.dir}/[module]-[revision](-[classifier]).[ext]"/>
  </target>


  <target name="resolve-pentaho-system" depends="install-ivy">
    <ivy:resolve file="${ivyfile}" conf="pentaho-system" />
    <ivy:retrieve conf="pentaho-system" pattern="${system.dir}/[module].[ext]" />
    <for param="system">
      <path id="system-list">
        <fileset dir="${system.dir}">
          <include name="*.zip"/>
        </fileset>
      </path>
      <sequential>
        <unzip src="@{system}" dest="${system.dir}" overwrite="true"/>
        <delete file="@{system}"/>
      </sequential>
    </for>
    <!-- unfortunately knowledgable code -->
    <move file="${system.dir}/pentaho-karaf-assembly" tofile="${system.dir}/karaf" />
  </target>

  <!-- Makes sure the directories exist which will be used -->
  <target name="init" depends="install-ivy,install-antcontrib" description="Initializes the build process">
    <mkdir dir="${lib.dir}"/>
    <mkdir dir="${runtime-lib.dir}"/>
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${stage.dir.mac}"/>
    <mkdir dir="${stage.dir.winlinux}"/>
    <!-- Create standard extension points for users to drop in own stuff. -->
    <mkdir dir="${lib.dir}/ext"/>
    <mkdir dir="${testlib.dir}"/>
    <mkdir dir="${devlib.dir}"/>
  </target>

  <!-- Helper task, dont use directly -->
  <target name="-extract-plugin-file">
    <unzip dest="${pdi-plugins.stage.dir}" src="${internal.param.plugin.file}"/>
  </target>

  <target name="extract-plugins" depends="install-antcontrib">
    <!-- extract plugins in parallel -->
    <foreach target="-extract-plugin-file" inheritall="true" inheritrefs="true"
             param="internal.param.plugin.file" parallel="${assembly.parallel}" maxThreads="${assembly.maxThreads}">
      <path>
        <fileset dir="${pdi-plugins.stage.dir}">
          <include name="**/*.zip"/>
        </fileset>
      </path>
    </foreach>

    <!-- PRD uses this marker to tell Kettle where the plugins live. Kettle still assumes
         that its installation directory is the working directory. This assumption has been
         wrong since Windows XP, MacOS-X 10.7 and is wrong on most Unix environments. -->
    <touch file="${pdi-plugins.stage.dir}/.kettle-plugin-directory-marker"/>

    <!-- cleanup zip files -->
    <delete>
      <fileset dir="${pdi-plugins.stage.dir}" includes="**/*.zip"/>
    </delete>
  </target>

  <target name="extract-oss-licenses" depends="install-antcontrib">
    <unzip src="${bin.dir}/oss-licenses.zip" dest="${resource.dir}">
      <patternset>
        <include name="PentahoReporting_OSS_Licenses.html"/>
      </patternset>
    </unzip>
  </target>

  <!--=======================================================================
      install-mac-app-bundler

    (Fetches and) installs the MacApp Bundler for use by this ant script
    ====================================================================-->
  <target name="install-mac-app-bundler" depends="install-ivy,install-antcontrib" if="mac.java.runtime.home">
    <if>
      <istrue value="${mac-app-bundler.isinstalled}"/>
      <then>
        <echo message="Skipping Mac App Bundler install.  Mac App Bundler been configured by the build"/>
      </then>
      <else>
        <taskdef-with-ivy organisation="com.oracle"
                          module="appbundler"
                          revision="1.0"
                          classname="com.oracle.appbundler.AppBundlerTask"
                          task-name="bundleapp"/>
        <property name="mac-app-bundler.isinstalled" value="true"/>
      </else>
    </if>
  </target>

  <target name="stage-mac.inject-filetypes">
    <loadfile property="bundle.document.types" srcFile="${resource-mac.dir}/Contents/BundleDocumentTypes.txt"/>

    <!-- this task adds additional key/values to the info.plist that can't be created with the
    	 bundleapp task -->
    <replaceregexp file="${stage.dir.mac}/Pentaho Report Designer.app/Contents/Info.plist"
                   match="&lt;/dict&gt;\s*&lt;/plist&gt;"
                   replace="${bundle.document.types}"
        />

    <!-- launcher.properties is different now.  It also need to go into the Java directory with the class that is going to be run from the stub -->
    <copy file="${resource-mac.dir}/Contents/Resources/Java/launcher.properties"
          todir="${report-designer.dir.mac.java}"/>
  </target>

  <target name="-copy-directories-internal">
    <pathconvert property="internal.param.file.relative">
      <path location="${internal.param.file}"/>
      <map from="${source-dir}/" to=""/>
    </pathconvert>

    <copy todir="${target-dir}/${internal.param.file.relative}">
      <fileset dir="${source-dir}/${internal.param.file.relative}"/>
    </copy>

  </target>

  <target name="copy-directories">
    <foreach target="-copy-directories-internal" inheritall="true" inheritrefs="true"
             param="internal.param.file" parallel="${assembly.parallel}" maxThreads="${assembly.maxThreads}">
      <path>
        <dirset dir="${source-dir}">
          <include name="*"/>
        </dirset>
      </path>
    </foreach>
  </target>

  <target name="stage-plugins-mac" depends="init, extract-plugins">
    <antcall target="copy-directories" inheritall="true" inheritrefs="true">
      <param name="source-dir" value="${pdi-plugins.stage.dir}"/>
      <param name="target-dir" value="${report-designer.dir.mac}/${kettle-plugins.dir}"/>
    </antcall>

    <copy todir="${report-designer.dir.mac}/${kettle-plugins.dir}">
      <fileset dir="${pdi-plugins.stage.dir}">
        <include name="*"/>
      </fileset>
    </copy>
  </target>

  <target name="stage-mac.copy-files">
    <!-- put the other resources into the root of the .app -->
    <copy todir="${report-designer.dir.mac}" overwrite="true">
      <fileset dir="${resource.dir}"/>
    </copy>
    <copy todir="${report-designer.dir.mac}/lib" flatten="false" overwrite="true">
      <fileset dir="${lib.dir}"/>
    </copy>
  </target>

  <target name="stage-mac.copy-pentaho-system">
    <!-- leverages on existing 'resolve-pentaho-system' target --> 
    <antcall target="resolve-pentaho-system" inheritall="true" inheritrefs="true" />
    <!-- place pentaho-system resources on a system folder, at the root of the .app -->
    <mkdir dir="${report-designer.dir.mac}/system"/>
    <copy todir="${report-designer.dir.mac}/system" overwrite="true">
      <fileset dir="${system.dir}"/>
    </copy>
  </target>

  <target name="stage-mac.finalize-bundle"
          depends="stage-mac.inject-filetypes, stage-mac.copy-pentaho-system, stage-mac.copy-files, stage-plugins-mac"/>

  <target name="stage-mac" depends="init, install-mac-app-bundler" if="mac.java.runtime.home">
    <echo>Using JDK from ${mac.java.runtime.home}</echo>
    <bundleapp outputdirectory="${stage.dir.mac}"
               name="Pentaho Report Designer"
               displayname="Pentaho Report Designer"
               identifier="org.pentaho.reporting.designer.ReportDesigner"
               shortversion="${project.revision}"
               copyright="Copyright (c) 2008 - 2013 Pentaho Corporation.  All rights reserved. This program is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License, version 2.1 as published by the Free Software Foundation."
               mainclassname="org.pentaho.commons.launcher.Launcher"
               icon="${resource-mac.dir}/Contents/Resources/pentaho_reporting.icns">
      <runtime dir="${mac.java.runtime.home}"/>
      <classpath file="${runtime-lib.dir}/pentaho-application-launcher-${dependency.launcher.revision}.jar"/>
      <option value="-Dapple.laf.useScreenMenuBar=true"/>
      <option value="-Duser.dir=$APP_ROOT"/> <!-- set work dir as the root of the .app --> 
      <option value="-Xms256m"/>
      <option value="-Xmx512m"/>
    </bundleapp>

    <antcall target="stage-mac.finalize-bundle" inheritall="true" inheritrefs="true"/>
  </target>

  <target name="dist-mac" depends="stage-mac" if="mac.java.runtime.home">
    <zip destfile="${dist.dir}/${dist.name}-mac-${project.revision}.zip">
      <zipfileset dir="${stage.dir.mac}" filemode="755">
        <include name="**/*.sh"/>
        <include name="**/run-mailcap"/>
        <include name="**/*.command"/>
        <include name="**/JavaAppLauncher"/>
      </zipfileset>
      <zipfileset dir="${stage.dir.mac}">
        <exclude name="**/*.sh"/>
        <exclude name="**/run-mailcap"/>
        <exclude name="**/.command"/>
        <exclude name="**/JavaAppLauncher"/>
      </zipfileset>
    </zip>
  </target>

  <target name="stage-plugins-winlinux" depends="init, extract-plugins">
    <antcall target="copy-directories" inheritall="true" inheritrefs="true">
      <param name="source-dir" value="${pdi-plugins.stage.dir}"/>
      <param name="target-dir" value="${report-designer.dir.winlinux}/${kettle-plugins.dir}"/>
    </antcall>

    <copy todir="${report-designer.dir.winlinux}/${kettle-plugins.dir}">
      <fileset dir="${pdi-plugins.stage.dir}">
        <include name="*"/>
      </fileset>
    </copy>
  </target>

  <target name="stage-winlinux.copy-runtime">
    <copy todir="${report-designer.dir.winlinux}" overwrite="true">
      <fileset dir="${resource.dir}">
        <exclude name="docs/*"/>
      </fileset>
      <fileset dir="${runtime-lib.dir}">
        <include name="**/*.jar"/>
      </fileset>
    </copy>
    <copy todir="${report-designer.dir.winlinux}/docs" overwrite="true">
      <fileset dir="${doc.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>
    <move file="${report-designer.dir.winlinux}/pentaho-application-launcher-${dependency.launcher.revision}.jar"
          tofile="${report-designer.dir.winlinux}/launcher.jar"/>
  </target>

  <target name="stage-winlinux.copy-libs">
    <copy todir="${report-designer.dir.winlinux}/lib" flatten="false" overwrite="true">
      <fileset dir="${lib.dir}"/>
    </copy>
  </target>

  <!-- Stages the distribution files for the windows and linux platforms -->
  <target name="stage-winlinux" depends="init">
    <mkdir dir="${report-designer.dir.winlinux}"/>
    <antcall target="stage-winlinux.copy-runtime" inheritrefs="true"/>
    <antcall target="stage-winlinux.copy-libs" inheritrefs="true"/>
    <antcall target="stage-plugins-winlinux" inheritrefs="true"/>
  </target>

  <!-- Creates a distribution for the windows and linux platforms -->
  <target name="dist-winlinux" depends="stage-winlinux">
    <zip destfile="${dist.dir}/${dist.name}-${project.revision}.zip">
      <zipfileset dir="${stage.dir.winlinux}" filemode="755">
        <include name="**/*.sh"/>
        <include name="**/JavaApplicationStub"/>
        <include name="**/run-mailcap"/>
      </zipfileset>
      <zipfileset dir="${stage.dir.winlinux}">
        <exclude name="**/*.sh"/>
        <exclude name="**/JavaApplicationStub"/>
        <exclude name="**/run-mailcap"/>
      </zipfileset>
    </zip>
  </target>

  <!-- The dist target is where everything is assembled -->
  <target name="dist" depends="clean-all, init, resolve"
          description="Creates the distributables for the Report Designer">
    <antcall target="dist-winlinux" inheritrefs="true"/>
    <antcall target="dist-mac" inheritrefs="true"/>
  </target>


  <!-- Needs to handle dist-source and dist-javadoc targets multibuilds
       These do nothing in an assembly build, so don't call out to subfloor
    -->
  <target name="build"/>
  <target name="build-testcless"/>
  <target name="dist-source" depends="dist"/>
  <target name="dist-javadoc" depends="dist"/>
  <target name="source.zip"/>
  <target name="source.targz"/>
  <target name="javadoc"/>
  <target name="javadoc.zip"/>
  <target name="javadoc.targz"/>
  <target name="maven-publish-sources"/>
  <target name="publish-local"/>
  <target name="publish"/>
  <target name="test"/>
  <target name="cobertura"/>
  <target name="compile"/>
  <target name="jar"/>

</project>
