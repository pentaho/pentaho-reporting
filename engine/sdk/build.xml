<!--===========================================================================
  This is the build file for the Pentaho Reporting Classic SDK

  This build file will use the common_build.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.

  See common_build.xml for more details
============================================================================-->
<project name="sdk" basedir="." default="dist">

	<description>
	  This build file is used to create the Pentaho Reporting Classic SDK
		and works with the common_build.xml file.
	</description>

    <property file="${user.home}/.pentaho-reporting-build-settings.properties" prefix="sdk."
                description="Per user override settings-file for all pentaho-reporting projects." />

    <!-- Define the default location of the common build file -->
   	<property name="common.build.file" value="./build-res/subfloor.xml"
   		description="This is the location of the standardized build-res/subfloor.xml file"/>

	<!-- Import the common_build.xml file which contains all the default tasks -->
	<import file="${common.build.file}"/>

    <target name="cobertura" />
    <target name="dist-source" />
    <target name="jar" />
    <target name="compile" />
    <target name="test" />
    <target name="publish" />
    <target name="publish-local" />

    <!--=======================================================================
        continuous

        Runs a typical continuous integration build including project dist,
        test, and coverage artifacts
        ====================================================================-->
    <target name="continuous" depends="dist"/>


    <!--=======================================================================
        continuous-testless

        Runs a typical continuous integration build including project dist,
        and coverage artifacts
        ====================================================================-->
    <target name="continuous-testless" depends="dist"/>

    <!--=======================================================================
        continuous

        Runs a typical continuous integration build including project dist,
        test, and coverage artifacts
        ====================================================================-->
    <target name="continuous-local" depends="dist"/>


    <!--=======================================================================
        continuous-testless

        Runs a typical continuous integration build including project dist,
        and coverage artifacts
        ====================================================================-->
    <target name="continuous-local-testless" depends="dist"/>

    <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    -->

    <!-- Define properties for this assembly project -->
    <property name="resources.dir"           value="${basedir}/resources" />
    <property name="stage.dir"               value="${basedir}/stage" />
    <property name="stage.project.dir"       value="${stage.dir}/PentahoReportingEngineSDK" />
    <property name="stage.sample.dir"        value="${stage.project.dir}/samples" />
    <property name="stage.sample.source.dir" value="${stage.sample.dir}/source" />
    <property name="stage.sample.lib.dir"    value="${stage.sample.dir}/lib" />

    <!--=======================================================================
          init

          Ensures that all the required directories exist before processing
          a build.
          ====================================================================-->
    <target name="init">
      <mkdir dir="${dist.dir}" />
      <mkdir dir="${lib.dir}" />
    </target>

    <!--=======================================================================
          clean

          Cleans up any files from previous executions of this script
          ====================================================================-->
    <target name="clean">
        <delete dir="${stage.dir}" failonerror="false" />
        <delete dir="${dist.dir}" failonerror="false" />
    </target>

    <!--=======================================================================
          dir.check

          Ensures that all the required source directories exist
          before processing
          ====================================================================-->
    <target name="dir.check" depends="init">
        <available file="${classic-engine-samples.dir}" type="dir" property="classic-engine-samples.present"/>
        <fail message="Sample directory does not exist [${classic-engine-samples.dir}]" unless="classic-engine-samples.present"/>
    </target>

    <!--=======================================================================
          stage

          Stages the files for distribution
          ====================================================================-->
    <target name="stage" depends="init, dir.check, clean">
        <!-- Copy the resources directory ... these are the files that should be
             distrbuted that are not contained elsewhere -->
        <copy todir="${stage.project.dir}">
            <fileset dir="${resources.dir}" />
        </copy>

        <!-- Copy the sample project into the stage directory ... we are going
             to use it as a base -->
        <copy todir="${stage.sample.dir}">
            <fileset dir="${classic-engine-samples.dir}" >
                <exclude name="bin/" />
                <exclude name="dev-lib/" />
                <exclude name="dist/" />
                <exclude name="eclipse-bin/" />
                <exclude name="test-lib/" />
                <exclude name="WebContent/WEB-INF/lib/*" />
            </fileset>
        </copy>

        <copy todir="${stage.sample.dir}" failonerror="true">
            <fileset dir="${classic-engine-samples.dir}/dist" >
                <include name="*.war" />
            </fileset>
        </copy>
    	

    	<!-- Use ivy to get the required libraries -->
        <antcall target="resolve-default">
            <param name="lib.dir" value="${stage.sample.lib.dir}" />
        </antcall>
        
        <!-- Update the classpath information for the eclipse project -->
        <antcall target="create-dot-classpath">
        	<param name="basedir" value="${stage.sample.dir}"/>
        	<param name="lib.dir"  value="${stage.sample.lib.dir}"/>
        </antcall>
    </target>
    
    
	<!--=======================================================================
	      create-dot-classpath
	 
	      Creates the Eclipse .classpath file from the resolved
	      classpath from Ant.
	    ====================================================================-->
		<target name="create-dot-classpath"
		        depends="install-pentaho-ant-tasks,init">
		  <dot-classpath>
		    <!-- Include all lib dirs -->
		    <classpath>
		      <fileset dir="${stage.sample.dir}/lib">
		        <include name="*.jar" />
		      </fileset>
		    </classpath>
		  </dot-classpath>
		</target>

    <!--=======================================================================
          dist

          Creates the distributable packages
          ====================================================================-->
    <target name="dist" depends="stage">
        <!-- Package up the sdk -->
        <mkdir dir="${dist.dir}" />
        <zip zipfile="${dist.dir}/${ivy.artifact.id}-${project.revision}.zip">
            <zipfileset dir="${stage.dir}" filemode="755">
                <include name="**/*.sh"/>
            </zipfileset>
            <zipfileset dir="${stage.dir}">
                <exclude name="**/*.sh"/>
            </zipfileset>
        </zip>
    </target>
</project>
