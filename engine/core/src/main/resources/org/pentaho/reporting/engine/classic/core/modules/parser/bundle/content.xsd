<?xml version="1.0" encoding="UTF-8"?>
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified"
           targetNamespace="http://reporting.pentaho.org/namespaces/engine/classic/bundle/content/1.0"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:content="http://reporting.pentaho.org/namespaces/engine/classic/bundle/content/1.0">
  <xs:element name="content" type="content:contentType"/>
  <xs:complexType name="contentType">
    <xs:sequence>
      <xs:element type="content:settingsType" name="settings" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>Parsing order:
            The bundle:content file contains the script that controls which files get parsed to compose the report.

            A report consists of several parts:
            (0) This file: Orchestrates the parsing process.

            (1) Global Meta-Data. This is things like the author or the generator of the report or anything the user
            wants to add. Meta-data describes the report, but has no effect on the report's processing. Meta-Data
            can be referenced during the report processing (for example to print the author's name).

            The meta-data is always a static entry pointing the the file "/meta.xml" of the current bundle.
            There seems to be no need to allow a manual override here.

            (2) Settings: The classical report configuration along with the new environment configuration.

            If parsing the styles section fails with a "resource-not-found" exception, we assume that the global
            style does not exist and optionally fall back to the local cache.

            In addition to the referenced settings file here, we also parse the local settings file "/settings.xml"
            from the current bundle.
          </xs:documentation>
        </xs:annotation>
      </xs:element>

      <xs:element type="content:dataDefinitionType" name="data-definition" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>(3) Parameters: Defines the external parameters for a report and how these parameters should
            be queried.
            Right now, this only describes the parameters, later this may contain additional data to actually
            support the advanced generation of parameter-query pages.

            If parsing the styles section fails with a "resource-not-found" exception, we assume that the global
            style does not exist and optionally fall back to the local cache.

            In addition to the referenced parameter file here, we also parse the local parameter file "/parameters.xml"
            from the current bundle.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element type="content:stylesType" name="styles" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>(4) Styles: Defines global stylesheets. Optionally contains watermark and page-header and
            -footer
            sections.

            If parsing the styles section fails with a "resource-not-found" exception, we assume that the global
            style does not exist and optionally fall back to the local cache.

            In addition to the referenced styles file here, we also parse the local styles file "/styles.xml"
            from the current bundle.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element type="content:layoutType" name="layout" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>(5) Layout: The report-definition. This contains at least the group-structure. This can
            contain either
            a static report definition and can contain a wizard-definition as well.

            The data for each of the sections is stored in a well-known location inside the report-bundle. For some
            of the sections, settings and styles, an alternative global location can be specified. The global and the
            local file will be merged, where the local settings take precedence over the global settings.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="stylesType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute type="xs:string" name="ref"/>
        <xs:attribute type="xs:string" name="local-copy"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="layoutType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute type="xs:string" name="ref"/>
        <xs:attribute type="xs:string" name="local-copy"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="dataDefinitionType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute type="xs:string" name="ref"/>
        <xs:attribute type="xs:string" name="local-copy"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="settingsType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute type="xs:string" name="ref"/>
        <xs:attribute type="xs:string" name="local-copy"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
</xs:schema>