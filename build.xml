<!--===========================================================================
This is the build file for the collection of Shims modules to provide support
============================================================================-->
  
<project name="multimodule-build">

  <description>
    This builds all modules within this directory (specifically as declared by ${modules}).
  </description>

  <property file="${user.home}/.pentaho-reporting-build-settings.properties"
              description="Per user override settings-file for all pentaho-reporting projects." />

  <property file="build.properties" description="Module declaration." />

  <property name="subfloor.resources.dir"
            value="${user.home}/.subfloor"
            description="Base dir for runtime jars that are required exclusively by the build process" />
  <property name="subfloor.tmp.dir"
            value="${subfloor.resources.dir}/tmp"
            description="Temporary space where files are prepared for installation" />
  <property name="antcontrib.build.cache.dir"
            value="${subfloor.resources.dir}/ant-contrib"
            description="Directory where the Ant-Contrib jar (and dependencies) is placed after it is auto-downloaded by the build" />
  
  <!-- These are the modules this script should build in the proper order-->
  <!-- EXAMPLE: "core,extensions,extensions-cda,extensions-charting,extensions-drilldown,extensions-kettle,extensions-mondrian,extensions-olap4j,extensions-openerp,extensions-pentaho-metadata,extensions-sampledata,extensions-scripting,extensions-toc,extensions-xpath,extensions-xquery,legacy-charts,legacy-functions,extensions-reportdesigner-parser,demo,samples" -->
  <property name="modules" value="DEFINE_ME" />


  <!--=======================================================================
      install-antcontrib

      (Fetches and) installs ant-contrib tasks.
      ====================================================================-->
  <target name="install-antcontrib" depends="antcontrib.download-check">
    <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
        <fileset dir="${antcontrib.build.cache.dir}">
          <include name="*.jar" />
        </fileset>
      </classpath>
    </taskdef>
  </target>


  <!--=======================================================================
      antcontrib.download-check

      Fetches ant-contrib from sourceforge if it is not already present
      ====================================================================-->
  <target name="antcontrib.download-check">
    <condition property="antcontrib.available">
      <and>
        <available file="${antcontrib.build.cache.dir}" />
        <available classname="net.sf.antcontrib.logic.IfTask">
          <classpath>
            <fileset dir="${antcontrib.build.cache.dir}">
              <include name="*.jar" />
            </fileset>
          </classpath>
        </available>
      </and>
    </condition>
    <antcall target="antcontrib.download" />
  </target>


  <!--=======================================================================
      antcontrib.download

      Fetches ant-contrib from sourceforge
      ====================================================================-->
  <target name="antcontrib.download" unless="antcontrib.available">
    <mkdir dir="${subfloor.tmp.dir}" />
    <get src="http://downloads.sourceforge.net/ant-contrib/ant-contrib-1.0b3-bin.zip"
         dest="${subfloor.tmp.dir}/antcontrib.zip"
         usetimestamp="true" />
    <unzip src="${subfloor.tmp.dir}/antcontrib.zip" dest="${subfloor.tmp.dir}">
      <patternset>
        <include name="**/*.jar" />
      </patternset>
    </unzip>
    <copy todir="${antcontrib.build.cache.dir}">
      <fileset dir="${subfloor.tmp.dir}/ant-contrib">
        <include name="**/*.jar" />
      </fileset>
    </copy>
  </target>


  <target name="init" depends="install-antcontrib" />
  
 
  <!-- Runs "clean-all" on the modules defined in the property "modules" -->
  <target name="clean-all" depends="init">
    <for list="${modules}" param="module" trim="true">
      <sequential>
        <ant antfile="build.xml" dir="@{module}" useNativeBasedir="true" inheritall="false" target="clean-all"/>
      </sequential>
    </for>
  </target>

  <!-- Clean all the modules defined in the property "modules" -->
  <target name="clean" depends="init">
    <for list="${modules}" param="module" trim="true">
      <sequential>
        <ant antfile="build.xml" dir="@{module}" useNativeBasedir="true" inheritall="false" target="clean" />
      </sequential>
    </for>
  </target>

  <!-- Clean all the modules defined in the property "modules" -->
  <target name="jar" depends="init">
    <for list="${modules}" param="module" trim="true">
      <sequential>
        <ant antfile="build.xml" dir="@{module}" useNativeBasedir="true" inheritall="false">
          <target name="jar" />
        </ant>
      </sequential>
    </for>
  </target>

  <!-- All following targets are wrappers for all modules -->
  <target name="resolve" depends="init">
    <for list="${modules}" param="module" trim="true">
      <sequential>
        <ant antfile="build.xml" dir="@{module}" useNativeBasedir="true" inheritall="false" target="resolve" />
      </sequential>
    </for>
  </target>
  
  <target name="test" depends="init">
    <for list="${modules}" param="module" trim="true">
      <sequential>
        <ant antfile="build.xml" dir="@{module}" useNativeBasedir="true" inheritall="false" target="test" />
      </sequential>
    </for>
  </target>

  <target name="cobertura" depends="init">
    <for list="${modules}" param="module" trim="true">
      <sequential>
        <ant antfile="build.xml" dir="@{module}" useNativeBasedir="true" inheritall="false" target="cobertura" />
      </sequential>
    </for>
  </target>

  <target name="publish-local" depends="init">
    <for list="${modules}" param="module" trim="true">
      <sequential>
        <ant antfile="build.xml" dir="@{module}" useNativeBasedir="true" inheritall="false" target="publish-local" />
      </sequential>
    </for>
  </target>

  <target name="publish" depends="init">
    <for list="${modules}" param="module" trim="true">
      <sequential>
        <ant antfile="build.xml" dir="@{module}" useNativeBasedir="true" inheritall="false" target="publish" />
      </sequential>
    </for>
  </target>

  <target name="dist" depends="init">
    <for list="${modules}" param="module" trim="true">
      <sequential>
        <ant antfile="build.xml" dir="@{module}" useNativeBasedir="true" inheritall="false" target="dist" />
      </sequential>
    </for>
  </target>
  
  <target name="continuous" depends="init">
    <for list="${modules}" param="module" trim="true">
      <sequential>
        <ant antfile="build.xml" dir="@{module}" useNativeBasedir="true" inheritall="false" target="continuous" />
      </sequential>
    </for>
  </target>

  <target name="continuous-testless" depends="init">
    <for list="${modules}" param="module" trim="true">
      <sequential>
        <ant antfile="build.xml" dir="@{module}" useNativeBasedir="true" inheritall="false" target="continuous-testless" />
      </sequential>
    </for>
  </target>
  
  <target name="continuous-local" depends="init">
    <for list="${modules}" param="module" trim="true">
      <sequential>
        <ant antfile="build.xml" dir="@{module}" useNativeBasedir="true" inheritall="false" target="continuous-local" />
      </sequential>
    </for>
  </target>

  <target name="continuous-local-testless" depends="init">
    <for list="${modules}" param="module" trim="true">
      <sequential>
        <ant antfile="build.xml" dir="@{module}" useNativeBasedir="true" inheritall="false" target="continuous-local-testless" />
      </sequential>
    </for>
  </target>

  <target name="longrun-cobertura" depends="init">
    <for list="${modules}" param="module" trim="true">
      <sequential>
        <ant antfile="build.xml" dir="@{module}" useNativeBasedir="true" inheritall="false" target="longrun-cobertura">
          <property name="junit.sysprop.org.pentaho.reporting.engine.classic.test.ExeuteLongRunningTest" value="true"/>
          <property name="basedir" value="${basedir}/@{module}"/>
        </ant>
      </sequential>
    </for>
  </target>

  <target name="longrun-test" depends="init">
    <for list="${modules}" param="module" trim="true">
      <sequential>
        <ant antfile="build.xml" dir="@{module}" useNativeBasedir="true" inheritall="false" target="longrun-test">
          <property name="junit.sysprop.org.pentaho.reporting.engine.classic.test.ExeuteLongRunningTest" value="true"/>
        </ant>
      </sequential>
    </for>
  </target>
	
</project>
