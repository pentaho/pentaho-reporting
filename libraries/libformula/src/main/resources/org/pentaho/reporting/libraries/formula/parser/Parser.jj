options
{
  LOOKAHEAD=1;
  UNICODE_INPUT=true;
  //IGNORE_CASE=true;
  FORCE_LA_CHECK=true;
  CACHE_TOKENS=true;
  STATIC=false;
  JAVA_UNICODE_ESCAPE=true;
}

PARSER_BEGIN(GeneratedFormulaParser)

package org.pentaho.reporting.libraries.formula.parser;

import java.math.BigDecimal;
import java.util.ArrayList;

import org.pentaho.reporting.libraries.formula.lvalues.ContextLookup;
import org.pentaho.reporting.libraries.formula.lvalues.FormulaFunction;
import org.pentaho.reporting.libraries.formula.lvalues.LValue;
import org.pentaho.reporting.libraries.formula.lvalues.PostfixTerm;
import org.pentaho.reporting.libraries.formula.lvalues.PrefixTerm;
import org.pentaho.reporting.libraries.formula.lvalues.StaticValue;
import org.pentaho.reporting.libraries.formula.lvalues.Term;
import org.pentaho.reporting.libraries.formula.lvalues.DefaultDataTable;
import org.pentaho.reporting.libraries.formula.operators.InfixOperator;
import org.pentaho.reporting.libraries.formula.operators.OperatorFactory;
import org.pentaho.reporting.libraries.formula.operators.PostfixOperator;
import org.pentaho.reporting.libraries.formula.operators.PrefixOperator;
import org.pentaho.reporting.libraries.formula.typing.coretypes.NumberType;
import org.pentaho.reporting.libraries.formula.typing.coretypes.TextType;
import org.pentaho.reporting.libraries.formula.lvalues.ParsePosition;

public abstract class GeneratedFormulaParser
{

  protected GeneratedFormulaParser ()
  {
  }

  protected abstract OperatorFactory getOperatorFactory();

  protected ParsePosition createPosition(Token token)
  {
    return new ParsePosition
       (token.beginLine, token.beginColumn, token.endLine, token.endColumn);
  }
}
PARSER_END(GeneratedFormulaParser)

SKIP :
{
    <WHITESPACE:  ["\u0000" - "\u0020"]>
  | <"--" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>

}


TOKEN:
{
    <#LETTER:            (["a" - "z"]|["A" - "Z"]|["_"]|["$"])>
  | <#NON_ZERO_DIGIT:    ["1"-"9"]>
  | <#DIGIT:             ["0"-"9"]>

  | <#HEX_DIGIT:         (<DIGIT> | ["A" - "F"] | ["a" - "f"])>
  | <#BINARY_DIGIT:      ["0", "1"] >

  | <UNSIGNED_INTEGER:   ((<DIGIT>)+)>

  | <#EXPONENT_PART:     ( ("e" | "E") (("+" | "-")?) (<DIGIT>)+ ) >

  | <#NEWLINE:           (["\n","\r"] | "\n\r" | "\r\n")>

  | <#NONQUOTE_CHARACTER:  ("\"\"" | ~[ "\""] )>
  | <#NONQUOTE_LOOKUP:  ( ~["]",")","("] )>

  | <COMMA:             "," >
  | <#PERIOD:            "." >
  | <#COLON:             ":" >
  | <#QUOTE:             "'" >
  | <#DQUOTE:            "\"" >
  | <SEMICOLON:          ";" >
  | <L_PAREN:            "(" >
  | <R_PAREN:            ")" >
  | <L_BRACKET:          "[" >
  | <R_BRACKET:          "]" >
  | <QUEST:              "?" >
  | <L_BRACE:            "{" >
  | <R_BRACE:            "}" >
  | <PIPE:				 "|" >

//  | <#COMMENT_INTRODUCER:          "--">
}


TOKEN [IGNORE_CASE]:
{

// Operators for expressions: First the Infix-Operators.
    <PLUS:     "+">
  | <MINUS:    "-">
  | <MULT:     "*">
  | <DIV:      "/">
  | <POW:      "^">
  | <EQUALS:       "=">
  | <NOT_EQUALS:   "<>">
  | <LT_EQUALS:    "<=">
  | <GT_EQUALS:    ">=">
  | <LT:           "<">
  | <GT:           ">">
  | <CONCAT:       "&">
// Postfix operators: Only one for now.
  | <PERCENT:      "%">
// Prefix operators: Two defined at the moment, PLUS and MINUS (already covered).


///
///
  | <IDENTIFIER:  (<LETTER> (<LETTER> | <DIGIT>)* (<PERIOD> (<LETTER> | <DIGIT>)*)?)>
  | <COLUMN_LOOKUP:  ((<L_BRACKET> (<NONQUOTE_LOOKUP>)* <R_BRACKET>) |
                      (<L_BRACKET> <DQUOTE> (<NONQUOTE_CHARACTER>)* <DQUOTE> <R_BRACKET>))>
  | <STRING_LITERAL:     (<DQUOTE> (<NONQUOTE_CHARACTER>)* <DQUOTE>)>

/// Defining numeric values.
///
  | <UNSIGNED_NUMERIC_LITERAL:     (<EXACT_NUMERIC_LITERAL> | <APPROXIMATE_NUMERIC_LITERAL>)>
  | <#EXACT_NUMERIC_LITERAL:        (<UNSIGNED_INTEGER> (<PERIOD> <UNSIGNED_INTEGER>)? | (<PERIOD> <UNSIGNED_INTEGER>))>
  | <#APPROXIMATE_NUMERIC_LITERAL: (<MANTISSA> ["E","e"] ( (<SIGN>)? <UNSIGNED_INTEGER>))>
  | <#MANTISSA:                    <EXACT_NUMERIC_LITERAL> >
  | <#SIGN:                        ["+","-"]>
  | <NULL:                         "null">
}

LValue getExpression () :
{
  LValue retval = null;
  Term term = null;
}
{
  retval = getLValue ()
  (
    term = startTail (new Term(retval))
    (
      term = startTail (term)
    )*
  )?
  {
    if (term != null)
    {
      return term;
    }
    return retval;
  }
}

Term startTail (LValue retval) :
{
  LValue val = null;
  InfixOperator op = null;
  Term ex = null;
}
{
    op  = getInfixOperator()
    val = getLValue ()
    {
      if (retval instanceof Term)
      {
        ex = (Term) retval;
      }
      else
      {
        ex = new Term (retval);
      }
      ex.add (op, val);

      return ex;
    }
}

LValue getLValue ():
{
  Token value = null;
  LValue retval = null;
  PrefixOperator prefixOp = null;
  PostfixOperator postfixOp = null;
}
{
  (
    prefixOp = getPrefixOperator()
  )?
  (
      value = <COLUMN_LOOKUP> { retval = new ContextLookup (ParserTools.stripReferenceQuote(value.image), createPosition(value)); }
    | value = <STRING_LITERAL> { retval = new StaticValue (ParserTools.stripQuote(value.image), TextType.TYPE, createPosition(value)); }
    | value = <UNSIGNED_NUMERIC_LITERAL> { retval = new StaticValue (new BigDecimal (value.image), NumberType.GENERIC_NUMBER, createPosition(value)); }
    | value = <UNSIGNED_INTEGER> { retval = new StaticValue (new BigDecimal (value.image), NumberType.GENERIC_NUMBER, createPosition(value)); }
    | <NULL> { retval = new StaticValue (null, createPosition(value)); }
    | <L_BRACE> { retval = parseArray(); } <R_BRACE>
    | value = <IDENTIFIER> <L_PAREN> { retval = parseFunction(value.image, createPosition(value)); } <R_PAREN>
    | <L_PAREN> { retval = getExpression (); } <R_PAREN>
    {
      if (retval instanceof Term == false)
      {
        retval = new Term (retval);
      }
    }
  )
  (
     postfixOp = getPostfixOperator()
  )?
  {
    if (postfixOp != null)
    {
      retval = new PostfixTerm(retval, postfixOp);
    }
    if (prefixOp != null)
    {
      retval = new PrefixTerm(prefixOp, retval);
    }
    return retval;
  }
}

LValue parseArray() :
{
	ArrayList rows = new ArrayList();
	LValue[] row = null;
}
{
  (
		row = parseRow()
		{
			rows.add(row);
		}
	)?
	(
		<PIPE>
		row = parseRow()
		{
	       	// should we check here for column count equality to the first row column count?
	       	// or do we give this responsability to a DefaultDataTable constructor?
			rows.add(row);
		}
	)*
	{
		LValue[][] table = (LValue[][])rows.toArray(new LValue[rows.size()][]);
		return new DefaultDataTable(table);
	}
}

LValue[] parseRow():
{
	ArrayList cols = new ArrayList();;
	LValue column = null;
}
{
	(
      column = getExpression()
      {
        cols.add(column);
      }
    )
    (
      <SEMICOLON>
        column = getExpression()
        {
           cols.add(column);
        }
    )*
    {
		return (LValue[]) cols.toArray(new LValue[cols.size()]);
    }
}


LValue parseFunction (String name, ParsePosition parsePosition) :
{
   ArrayList params = new ArrayList();
   LValue parameter = null;
   Token value = null;
   boolean parameterExpected = false;
}
{
   (
     (
       (
         value = <SEMICOLON>
         {
           parameterExpected = false;
           params.add(new StaticValue(null, createPosition(value)));
         }
       )
    |  (
         parameter = getExpression()
         {
           parameterExpected = false;
           params.add(parameter);
         }
       )
     )
     (
       (
         value = <SEMICOLON>
         {
           if (parameterExpected == true)
           {
             params.add(new StaticValue(null, createPosition(value)));
           }
           parameterExpected = true;
         }
       )
       (
         parameter = getExpression()
         {
           params.add(parameter);
           parameterExpected = false;
         }
       )?
     )*
   )?
   {
     if (parameterExpected == true)
     {
       params.add(new StaticValue(null, createPosition(value)));
     }

     if (params == null)
     {
       return new FormulaFunction(name, new LValue[0], parsePosition);
     }

     LValue[] paramVals = (LValue[]) params.toArray(new LValue[params.size()]);
     return new FormulaFunction(name, paramVals, parsePosition);
   }
}

PrefixOperator getPrefixOperator () :
{
  Token value = null;
}
{
  (
     value = <PLUS>
   | value = <MINUS>
  )
  {
     return getOperatorFactory().createPrefixOperator(value.image);
  }
}

PostfixOperator getPostfixOperator () :
{
  Token value = null;
}
{
  (
     value = <PERCENT>
  )
  {
     return getOperatorFactory().createPostfixOperator(value.image);
  }
}

InfixOperator getInfixOperator () :
{
  InfixOperator op = null;
  Token value = null;
}
{
  (
    value = <PLUS>
  | value = <MINUS>
  | value = <MULT>
  | value = <DIV>
  | value = <POW>
  | value = <EQUALS>
  | value = <NOT_EQUALS>
  | value = <LT_EQUALS>
  | value = <GT_EQUALS>
  | value = <LT>
  | value = <GT>
  | value = <CONCAT>
  )
  {
    return getOperatorFactory().createInfixOperator(value.image);
  }
}

